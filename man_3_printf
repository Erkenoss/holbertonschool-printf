NAME:

	_printf

SYNOPSIS:

	int _printf(const char *format, ...);

INCLUDE:

	#include "main.h"
	#include <stdarg.h>
	#include <stddef.h>

DESCRIPTION:

	Display in the outut the format given when there is a call.
	If there is no format, the function return -1 to signal an error.
	If there is % followed by the \0 (the end line characters), the function return -1.
	When the function end, it returns the number of characters present in the output.

	You need to use it in followed instructions:
		_printf("format", arguments);
	OR FOR EXEMPLE:
		_printf("format is: %i", arguments);

	And the errors cases:
		_printf("%");
		_printf();

EXEMPLES:

	%s (display a string by calling the printf_string function)
	_printf("%s\n", "toto");
	OUTPUT:
	toto

	%c (display a char by calling the printf_char function)
	_printf("%c\n", 'k');
	OUTPUT:
	k

	%i (display an int by calling the printf_int function)
	_printf("%i\n", 10);
	OUTPUT:
	10

	%d (display a decimal by calling the printf_int function (for now))
	_printf("%d\n", 20);
	OUTPUT:
	20

RETURN VALUE:

	The function _printf() will return -1 in the error case and the number of display characters in success.

AUTHOR:

	Write by Xavier Bertin and Jeremy Macal
